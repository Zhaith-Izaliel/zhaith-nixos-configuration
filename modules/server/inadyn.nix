{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkOption mkIf mkEnableOption mkPackageOption types literalExpression optional concatStringsSep mapAttrsToList;
  cfg = config.services.inadyn;

  configText = pkgs.writeText "inadyn.conf" (''
      # In-a-Dyn is a dynamic DNS client with multiple SSL/TLS library support
      # Generated by Nix
      # See inadyn.conf(5)

    ''
    + cfg.settings);

  configFile = "/run/inadyn/inadyn.conf";

  replace-secret = concatStringsSep "\n" (
    mapAttrsToList (
      name: value: ''${pkgs.replace-secret}/bin/replace-secret" "${name}" "${value}" "${configFile}"''
    )
    cfg.passwords
  );

  preStart =
    if (cfg.passwords != null)
    then ''
      mkdir -p "/run/inadyn"
      install --mode=600 --owner=$USER ${configText} ${configFile}
      ${replace-secret}
    ''
    else "";

  extraArgs = lib.strings.concatStringsSep " " ([
      "--foreground"
      "--syslog"
      "--no-pidfile"
    ]
    ++ cfg.extraArgs);
in {
  options.services.inadyn = {
    enable = mkEnableOption "Inadyn dynamic DNS client";

    package = mkPackageOption pkgs "inadyn" {};

    settings = mkOption {
      type = types.str;
      default = "";
      description = "Configuration options for Inadyn.";
      example = literalExpression ''
        period          = 300
        user-agent      = Mozilla/5.0

        provider freedns {
          username    = lower-case-username
          password    = case-sensitive-pwd
          hostname    = some.example.com
        }
      '';
    };

    passwords = mkOption {
      type = types.nullOr (types.attrsOf types.path);
      default = null;
      description = ''
        Defines passwords for Inadyn in the form `{ placeholder = "passwordFile" }` where:
        - `placeholder` corresponds to the placeholder used in your `settings` for the corresponding password
        - `passwordFile` corresponds to the file containing the password. The file must be only read accessible to root.
      '';
    };

    extraArgs = mkOption {
      type = types.listOf types.str;
      default = [];
      description = "Extra arguments when running Inadyn.";
      example = literalExpression "--force";
    };
  };

  config = mkIf cfg.enable {
    systemd.services.inadyn = {
      description = "Internet Dynamic DNS Client";
      wantedBy = ["multi-user.target"];
      after = ["network-online.target"];
      requires = ["network-online.target"];
      restartTriggers = optional (cfg.settings != null) configText;

      serviceConfig = {
        Type = "simple";
        User = "root";
        ExecStartPre = "!${pkgs.writeShellScript "inadyn-prestart" preStart}";
        ExecStart = "${lib.getBin cfg.package}/bin/inadyn -f ${configFile} ${extraArgs}";
      };
    };
  };
}
