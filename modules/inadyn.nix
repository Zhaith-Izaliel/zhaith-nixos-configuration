{ config, lib, pkgs, ... }:

with lib;

let
   cfg = config.services.inadyn;
in
{
  options.services.inadyn = {
    enable = mkEnableOption "Inadyn dynamic DNS client";

    package = mkOption {
      type = types.package;
      default = pkgs.inadyn;
      defaultText = literalExpression "pkgs.inadyn";
      description = ''
        Inadyn package to install.
      '';
    };

    settings = mkOption {
      type = types.str;
      default = "";
      description = "Configuration options for Inadyn.";
      example = literalExpression ''
        period          = 300
        user-agent      = Mozilla/5.0

        provider freedns {
          username    = lower-case-username
          password    = case-sensitive-pwd
          hostname    = some.example.com
        }
      '';

      extraArgs = mkOption {
        type = types.listOf types.str;
        default = [
          "--foreground"
          "--syslog"
        ];
        description = "Extra arguments when running Inadyn.";
        defaultText = literalExpression ''
        [
          "--foreground"
          "--syslog"
        ]
        '';
        example = literalExpression "--force";
      };
    };
  };

  config = mkIf cfg.enable {
    environment.etc."inadyn.conf" = {
      enable = true;
      text = ''
         # In-a-Dyn is a dynamic DNS client with multiple SSL/TLS library support
         # Generated by Nix
         # See inadyn.conf(5)

      '' + cfg.settings;
    };

    systemd.services.inadyn = {
      description = "Internet Dynamic DNS Client";
      wantedBy = [ "multi-user.target" ];
      after = [ "network-online.target" ];
      requires = [ "network-online.target" ];
      restartTriggers = optional (cfg.settings != null)
        environment.etc."inadyn".text;

      serviceConfig = {
        Type = "simple";
        EnvironmentFile = toString environment.etc."inadyn.conf".source;
        ExecStart = "${lib.getBin cfg.package}/bin/inadyn ${lib.strings.concatStringsSep " " cfg.extraArgs}";
      };
    };
  };
}

